# -*- coding: utf-8 -*-
"""Heart Hadoop.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Hm7nnzw6v3mNxWVVrD7BhTCA9JpjeReq

#Heart_dataset
"""

import numpy as np  # Maths Operation
import pandas as pd  # CSV file operation
import matplotlib.pyplot as plt  # Data Visualization
import seaborn as sn # Data Visualization

df = pd.read_csv('/content/heart.csv')

df

df.drop('GenHealth',axis=1,inplace=True)

df

df.columns

HeartDisease = pd.get_dummies(df['HeartDisease'],drop_first=True)   # To Create Dummies # Remove String from Columns and replce with Numbers
df = pd.concat([df,HeartDisease],axis=1)
df.drop('HeartDisease',axis=1,inplace=True)
df.rename(columns = {'Yes':'HeartDisease'}, inplace = True)

AlcoholDrinking = pd.get_dummies(df['AlcoholDrinking'],drop_first=True)   # To Create Dummies # Remove String from Columns and replce with Numbers
df = pd.concat([df,AlcoholDrinking],axis=1)
df.drop('AlcoholDrinking',axis=1,inplace=True)
df.rename(columns = {'Yes':'AlcoholDrinking'}, inplace = True)

Smoking = pd.get_dummies(df['Smoking'],drop_first=True)   # To Create Dummies # Remove String from Columns and replce with Numbers
df = pd.concat([df,Smoking],axis=1)
df.drop('Smoking',axis=1,inplace=True)
df.rename(columns = {'Yes':'Smoking'}, inplace = True)

Stroke = pd.get_dummies(df['Stroke'],drop_first=True)   # To Create Dummies # Remove String from Columns and replce with Numbers
df = pd.concat([df,Stroke],axis=1)
df.drop('Stroke',axis=1,inplace=True)
df.rename(columns = {'Yes':'Stroke'}, inplace = True)

Sex = pd.get_dummies(df['Sex'],drop_first=True)   # To Create Dummies # Remove String from Columns and replce with Numbers
df = pd.concat([df,Sex],axis=1)
df.drop('Sex',axis=1,inplace=True)
df.rename(columns = {'Male':'Sex'}, inplace = True)

DiffWalking = pd.get_dummies(df['DiffWalking'],drop_first=True)   # To Create Dummies # Remove String from Columns and replce with Numbers
df = pd.concat([df,DiffWalking],axis=1)
df.drop('DiffWalking',axis=1,inplace=True)
df.rename(columns = {'Yes':'DiffWalking'}, inplace = True)

Diabetic = pd.get_dummies(df['Diabetic'],drop_first=True)   # To Create Dummies # Remove String from Columns and replce with Numbers
df = pd.concat([df,Diabetic],axis=1)
df.drop('Diabetic',axis=1,inplace=True)
df.rename(columns = {'Yes':'Diabetic'}, inplace = True)

PhysicalActivity = pd.get_dummies(df['PhysicalActivity'],drop_first=True)   # To Create Dummies # Remove String from Columns and replce with Numbers
df = pd.concat([df,PhysicalActivity],axis=1)
df.drop('PhysicalActivity',axis=1,inplace=True)
df.rename(columns = {'Yes':'PhysicalActivity'}, inplace = True)

Asthma= pd.get_dummies(df['Asthma'],drop_first=True)   # To Create Dummies # Remove String from Columns and replce with Numbers
df = pd.concat([df,Asthma],axis=1)
df.drop('Asthma',axis=1,inplace=True)
df.rename(columns = {'Yes':'Asthma'}, inplace = True)

KidneyDisease =  pd.get_dummies(df['KidneyDisease'],drop_first=True)   # To Create Dummies # Remove String from Columns and replce with Numbers
df = pd.concat([df,KidneyDisease],axis=1)
df.drop('KidneyDisease',axis=1,inplace=True)
df.rename(columns = {'Yes':'KidneyDisease'}, inplace = True)

SkinCancer = pd.get_dummies(df['SkinCancer'],drop_first=True)   # To Create Dummies # Remove String from Columns and replce with Numbers
df = pd.concat([df,SkinCancer],axis=1)
df.drop('SkinCancer',axis=1,inplace=True)
df.rename(columns = {'Yes':'SkinCancer'}, inplace = True)

df

"""#Visualization of Data"""

df.hist(figsize = (20,20))

sn.heatmap(df.corr())

"""# Decide Dependant and Independant Elements in Data Set"""

X=df.drop('HeartDisease',axis=1)

y=df['HeartDisease']

df

"""#Train Test Split"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test =train_test_split(X,y,test_size=0.3)

X_train.info()

"""#Logistic Regression"""

from sklearn.linear_model import LogisticRegression

logmodel = LogisticRegression()

logmodel.fit(X_train,y_train)

predictions = logmodel.predict(X_test)

from sklearn.metrics import classification_report

print(classification_report(y_test,predictions))

from sklearn.metrics import confusion_matrix

print(confusion_matrix(y_test,predictions))

